type Query {
  items: Items
}

type Items {
  typeA: [ItemA]!
  typeB: [ItemB]!
  byId(id: String): ItemUnion
}

interface BaseItem {
  idField: String
  name: String
  computed(input: Params): Computed
}

type ItemA implements BaseItem {
  idField: String
  name: String
  computed(input: Params): Computed
  extra: String
}

type ItemB implements BaseItem {
  idField: String
  name: String
  computed(input: Params): Computed
  moreInfo: String
}

union ItemUnion = ItemA | ItemB

type Computed {
  result: [ResultItem]
  calculationStatus: Status
}

type ResultItem {
  x: Int!
  y: Float!
}

type Status {
  status: STATUS
  message: String
}

enum STATUS {
  OK
  ERROR
  NOT_IMPLEMENTED
}

input Params {
  value: Int
}

type Echo {
  text: String
}

type Mutation {
  testMutation(q: String): Echo
}
